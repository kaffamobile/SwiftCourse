#% text_encoding = utf8

_package user

_pragma(classify_level=basic, usage=internal)
def_slotted_exemplar(:swift_course_dialog, {}, :model)
$

_pragma(classify_level=basic, usage=internal)
_private _method swift_course_dialog.dataset
	_return gis_program_manager.cached_dataset(:electricity)
_endmethod
$

_pragma(classify_level=basic, usage=internal)
_private _method swift_course_dialog.application
	_return smallworld_product.application(:cam_db_swaf_professional)
_endmethod
$

_pragma(classify_level=basic, usage=internal)
_method swift_course_dialog.activate_in(frame)
	_local canvas << sw_canvas_container.new(
		frame,
		_unset, 1,
		:height,     300,
		:width,      400,
		:min_width,  400,
		:min_height, 300,
		:row_resize_values, {0, 1}
	)

	_self.create_toolbar(canvas)
	_self.create_content(canvas)

	_self.title << "SWIFT Course Dialog"
_endmethod
$

_pragma(classify_level=basic, usage=internal)
_private _method swift_course_dialog.create_toolbar(parent)
	_local toolbar_container << sw_toolbar_container.new(
		parent,
		_false,
		:background_type,   :container,
		:show_separators?,  _true
							 )

	t1 << toolbar_container.create_toolbar(:col_spacing, 2)
	sw_button_item.new(t1, :image, {:application, :silk_ui_resources})
	sw_button_item.new(t1, :image, {:application_add, :silk_ui_resources})
	sw_button_item.new(t1, :image, {:application_delete, :silk_ui_resources})
	# TODO: add split
	t2 << toolbar_container.create_toolbar(:col_spacing, 2)
	sw_button_item.new(t2, :image, {:application_form, :silk_ui_resources})
	sw_button_item.new(t2, :image, {:application_form_add, :silk_ui_resources})
	sw_button_item.new(t2, :image, {:application_form_delete, :silk_ui_resources})
_endmethod
$

_pragma(classify_level=basic, usage=internal)
_private _method swift_course_dialog.create_content(parent)
	_local tab_container << sw_vertical_tab_container.new(parent)
	
	_local tree_page  << tab_container.new_tab("Tree",      {:sitemap_color,         :silk_ui_resources})
	_local form_page  << tab_container.new_tab("Form",      {:application_form,      :silk_ui_resources})
	_local table_page << tab_container.new_tab("Table",     {:table,                 :silk_ui_resources})
	_local align_page << tab_container.new_tab("Alignment", {:application_view_tile, :silk_ui_resources})
	_local doc_page   << tab_container.new_tab("Document",  {:page_white_text,       :silk_ui_resources})
	_self.add_form_page(form_page)
	_self.add_tree_page(tree_page)
_endmethod
$

_private _method swift_course_dialog.add_form_page(parent)
	_local canvas << sw_container.new(
		parent,
		_unset, 1,
		:height,     300,
		:width,      400,
		:min_width,  400,
		:min_height, 300,
		:outer_spacing, 5,
		:row_resize_values, {1, 0}
	)

	form_control << swift_course_form.new()
	form_control.create_content(canvas)
_endmethod
$

_private _method swift_course_dialog.add_tree_page(parent)
	sw_tree.new(parent,
		:model, _self,
		:data_selector, :tree_content|()|,
		:aspect, :tree_content)
	_self.changed(:tree_content, :refresh)
_endmethod
$

_method swift_course_dialog.tree_content(parent)
	_for substation _over _self.substation_col().fast_elements()
	_loop
		substation_node << _self.add_tree_node(parent, substation, :known_as),
		_self.add_supply_points(substation_node, substation)
	_endloop
_endmethod
$

_pragma(classify_level=basic, usage=internal)
_method swift_course_dialog.add_tree_node(parent, an_rwo, label_method)
	node_container << sw_tree_element.new(parent, :default_col_alignment, :left)
	sw_label_item.new(node_container, an_rwo.perform(label_method), :min_width, 200)
	sw_button_item.new(node_container,
			   :model, _self,
			   :selector, {:goto_object|()|, an_rwo},
			   :image, {:picture_go, :silk_ui_resources})
	sw_button_item.new(node_container,
			   :model, _self,
			   :selector, {:select_object|()|, an_rwo.location},
			   :image, {:picture_edit, :silk_ui_resources})
	>> node_container
_endmethod
$

_method swift_course_dialog.add_supply_points(parent, substation)
	_for supply_point _over substation.supply_points()
	_loop
		_self.add_tree_node(parent, supply_point, :id)
	_endloop
_endmethod
$

_pragma(classify_level=basic, usage=internal)
_method swift_course_dialog.goto_object(object)
	_self.application.plugin(:maps).goto(object)
_endmethod
$

_pragma(classify_level=basic, usage=internal)
_method swift_course_dialog.select_object(geom)
	_self.goto_object(geom)
	_self.application.plugin(:editor_manager).set_selection(geometry_set.new_from({geom}))
_endmethod
$

_pragma(classify_level=basic, usage=internal)
_method swift_course_dialog.test_dialog()
	_return _self.exemplar.new().activate()
_endmethod
$

_private _method swift_course_dialog.substation_col()
	>> _self.electricity_view().collection(:substation)
_endmethod
$

_private _method swift_course_dialog.electricity_view()
	>> gis_program_manager.cached_dataset(:electricity)
_endmethod
$
