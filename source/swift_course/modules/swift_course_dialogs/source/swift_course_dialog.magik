#% text_encoding = utf8

_package user

_pragma(classify_level=basic, usage=internal)
def_slotted_exemplar(:swift_course_dialog, {}, :model)
$

_pragma(classify_level=basic, usage=internal)
_private _method swift_course_dialog.dataset
	_return gis_program_manager.cached_dataset(:electricity)
_endmethod
$

_pragma(classify_level=basic, usage=internal)
_private _method swift_course_dialog.application
	_return smallworld_product.application(:cam_db_swaf_professional)
_endmethod
$

_pragma(classify_level=basic, usage=internal)
_method swift_course_dialog.activate_in(frame)
	_local canvas << sw_canvas_container.new(
		frame,
		_unset, 1,
		:height,     300,
		:width,      400,
		:min_width,  400,
		:min_height, 300,
		:row_resize_values, {0, 1}
	)

	_self.create_toolbar(canvas)
	_self.create_content(canvas)

	_self.title << "SWIFT Course Dialog"
_endmethod
$

_pragma(classify_level=basic, usage=internal)
_private _method swift_course_dialog.create_toolbar(parent)
	_local toolbar_container << sw_toolbar_container.new(
		parent,
		_false,
		:background_type,   :container,
		:show_separators?,  _true
	)
_endmethod
$

_pragma(classify_level=basic, usage=internal)
_private _method swift_course_dialog.create_content(parent)
	_local tab_container << sw_tab_container.new(parent)
	
	_local form_page  << tab_container.new_tab("Form",      {:application_form,      :silk_ui_resources})
	_local tree_page  << tab_container.new_tab("Tree",      {:sitemap_color,         :silk_ui_resources})
	_local table_page << tab_container.new_tab("Table",     {:table,                 :silk_ui_resources})
	_local align_page << tab_container.new_tab("Alignment", {:application_view_tile, :silk_ui_resources})
	_local doc_page   << tab_container.new_tab("Document",  {:page_white_text,       :silk_ui_resources})
_endmethod
$

_pragma(classify_level=basic, usage=internal)
_method swift_course_dialog.goto_object(object)
	_self.application.plugin(:maps).goto(object)
_endmethod
$

_pragma(classify_level=basic, usage=internal)
_method swift_course_dialog.select_object(geom)
	_self.goto_object(geom)
	_self.application.plugin(:editor_manager).set_selection(geometry_set.new_from({geom}))
_endmethod
$

_pragma(classify_level=basic, usage=internal)
_method swift_course_dialog.test_dialog()
	_return _self.exemplar.new().activate()
_endmethod
$
